// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Json$ReactHooksTemplate = require("../Json.bs.js");
var Socket$ReactHooksTemplate = require("../Socket.bs.js");

var Invalid = Caml_exceptions.create("Round-ReactHooksTemplate.Invalid");

function joinRound(dispatch, roundId) {
  return fetch("/api/join/" + roundId).then(function (prim) {
                return prim.text();
              }).then(function (resp) {
              var json = Json$ReactHooksTemplate.parse(resp);
              var match = Json$ReactHooksTemplate.get("player_id", json);
              if (match !== undefined && typeof match !== "number" && match.TAG === /* String */0) {
                var playerId = match._0;
                var match$1 = Json$ReactHooksTemplate.get("player", json);
                if (match$1 !== undefined && typeof match$1 !== "number" && match$1.TAG === /* String */0) {
                  switch (match$1._0) {
                    case "player_1" :
                        var socket = Socket$ReactHooksTemplate.initSocket(playerId, "player_1");
                        var channel = Socket$ReactHooksTemplate.joinRoom(socket, roundId);
                        Curry._1(dispatch, {
                              TAG: /* JoinRound */0,
                              _0: roundId,
                              _1: playerId,
                              _2: /* Player1 */0,
                              _3: socket,
                              _4: channel
                            });
                        break;
                    case "player_2" :
                        var socket$1 = Socket$ReactHooksTemplate.initSocket(playerId, "player_2");
                        var channel$1 = Socket$ReactHooksTemplate.joinRoom(socket$1, roundId);
                        Curry._1(dispatch, {
                              TAG: /* JoinRound */0,
                              _0: roundId,
                              _1: playerId,
                              _2: /* Player2 */1,
                              _3: socket$1,
                              _4: channel$1
                            });
                        break;
                    default:
                      
                  }
                }
                
              }
              return Promise.resolve(undefined);
            });
}

function startNewRound(dispatch) {
  return fetch("/api/start").then(function (prim) {
                return prim.text();
              }).then(function (resp) {
              var json = Json$ReactHooksTemplate.parse(resp);
              var match = Json$ReactHooksTemplate.get("id", json);
              if (match !== undefined && !(typeof match === "number" || match.TAG !== /* String */0)) {
                return joinRound(dispatch, match._0);
              } else {
                return Promise.reject({
                            RE_EXN_ID: Invalid
                          });
              }
            });
}

exports.Invalid = Invalid;
exports.joinRound = joinRound;
exports.startNewRound = startNewRound;
/* Json-ReactHooksTemplate Not a pure module */
